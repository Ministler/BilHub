// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

namespace BilHub.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("backend.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcceptedTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AffiliatedSectionId")
                        .HasColumnType("int");

                    b.Property<string>("AssignmentDescriptionFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanBeGradedByStudents")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsItGraded")
                        .HasColumnType("bit");

                    b.Property<int>("MaxFileSizeInBytes")
                        .HasColumnType("int");

                    b.Property<bool>("VisibilityOfSubmission")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AffiliatedSectionId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AcceptedTypes = "pdf-doc-docx",
                            AffiliatedSectionId = 1,
                            AssignmentDescriptionFile = "Odev iteration 1",
                            CanBeGradedByStudents = true,
                            CourseId = 1,
                            CreatedAt = new DateTime(2021, 4, 27, 0, 13, 21, 984, DateTimeKind.Local).AddTicks(2633),
                            DueDate = new DateTime(2021, 4, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            IsItGraded = true,
                            MaxFileSizeInBytes = 4096,
                            VisibilityOfSubmission = true
                        },
                        new
                        {
                            Id = 4,
                            AcceptedTypes = "pdf-doc-docx",
                            AffiliatedSectionId = 1,
                            AssignmentDescriptionFile = "Odev iteration 2",
                            CanBeGradedByStudents = true,
                            CourseId = 1,
                            CreatedAt = new DateTime(2021, 4, 27, 0, 13, 21, 985, DateTimeKind.Local).AddTicks(5324),
                            DueDate = new DateTime(2021, 4, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            IsItGraded = true,
                            MaxFileSizeInBytes = 4096,
                            VisibilityOfSubmission = true
                        },
                        new
                        {
                            Id = 1,
                            AcceptedTypes = "pdf,doc,docx",
                            AffiliatedSectionId = 1,
                            AssignmentDescriptionFile = "Odev",
                            CanBeGradedByStudents = true,
                            CourseId = 1,
                            CreatedAt = new DateTime(2021, 4, 27, 0, 13, 21, 988, DateTimeKind.Local).AddTicks(9792),
                            DueDate = new DateTime(2021, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            IsItGraded = true,
                            MaxFileSizeInBytes = 1024,
                            VisibilityOfSubmission = true
                        },
                        new
                        {
                            Id = 2,
                            AcceptedTypes = "pdf,doc,docx",
                            AffiliatedSectionId = 1,
                            AssignmentDescriptionFile = "315 proje",
                            CanBeGradedByStudents = false,
                            CourseId = 2,
                            CreatedAt = new DateTime(2021, 4, 27, 0, 13, 21, 988, DateTimeKind.Local).AddTicks(9802),
                            DueDate = new DateTime(2021, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            IsItGraded = false,
                            MaxFileSizeInBytes = 1024,
                            VisibilityOfSubmission = false
                        });
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentedSubmissionId")
                        .HasColumnType("int");

                    b.Property<int>("CommentedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FileAttachmentAvailability")
                        .HasColumnType("bit");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxGrade")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CommentedSubmissionId");

                    b.HasIndex("CommentedUserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentText = "nays",
                            CommentedSubmissionId = 1,
                            CommentedUserId = 2,
                            CreatedAt = new DateTime(2021, 4, 27, 0, 13, 21, 986, DateTimeKind.Local).AddTicks(8751),
                            FileAttachmentAvailability = true,
                            Grade = 9.4m,
                            MaxGrade = 10.0m
                        });
                });

            modelBuilder.Entity("backend.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseSemester")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LockDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxGroupSize")
                        .HasColumnType("int");

                    b.Property<int>("MinGroupSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseInformation = "Object Oriented Software Engineering",
                            CourseSemester = "spring",
                            EndDate = new DateTime(2021, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            LockDate = new DateTime(2021, 4, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            MaxGroupSize = 6,
                            MinGroupSize = 5,
                            Name = "CS 319",
                            StartDate = new DateTime(2021, 2, 15, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CourseInformation = "Programming Languages",
                            CourseSemester = "spring",
                            EndDate = new DateTime(2021, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            LockDate = new DateTime(2021, 4, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            MaxGroupSize = 3,
                            MinGroupSize = 2,
                            Name = "CS 315",
                            StartDate = new DateTime(2021, 2, 15, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CourseInformation = "Data Structures and Algorithms",
                            CourseSemester = "spring",
                            EndDate = new DateTime(2021, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            LockDate = new DateTime(2021, 4, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            MaxGroupSize = 1,
                            MinGroupSize = 1,
                            Name = "CS 202",
                            StartDate = new DateTime(2021, 2, 15, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CourseInformation = "Computer Organization and Architecture",
                            CourseSemester = "spring",
                            EndDate = new DateTime(2021, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            LockDate = new DateTime(2021, 4, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            MaxGroupSize = 3,
                            MinGroupSize = 2,
                            Name = "CS 224",
                            StartDate = new DateTime(2021, 2, 15, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CourseInformation = "History",
                            CourseSemester = "spring",
                            EndDate = new DateTime(2021, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            LockDate = new DateTime(2021, 4, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            MaxGroupSize = 5,
                            MinGroupSize = 4,
                            Name = "Hist 200",
                            StartDate = new DateTime(2021, 2, 15, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CourseInformation = "Calculus",
                            CourseSemester = "spring",
                            EndDate = new DateTime(2021, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            LockDate = new DateTime(2021, 4, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            MaxGroupSize = 1,
                            MinGroupSize = 1,
                            Name = "Math 101",
                            StartDate = new DateTime(2021, 2, 15, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("backend.Models.CourseUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseUsers");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            CourseId = 1
                        },
                        new
                        {
                            UserId = 16,
                            CourseId = 1
                        },
                        new
                        {
                            UserId = 17,
                            CourseId = 1
                        },
                        new
                        {
                            UserId = 18,
                            CourseId = 2
                        },
                        new
                        {
                            UserId = 15,
                            CourseId = 3
                        },
                        new
                        {
                            UserId = 21,
                            CourseId = 3
                        },
                        new
                        {
                            UserId = 19,
                            CourseId = 4
                        },
                        new
                        {
                            UserId = 22,
                            CourseId = 4
                        },
                        new
                        {
                            UserId = 23,
                            CourseId = 2
                        },
                        new
                        {
                            UserId = 20,
                            CourseId = 6
                        },
                        new
                        {
                            UserId = 15,
                            CourseId = 5
                        });
                });

            modelBuilder.Entity("backend.Models.JoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int>("AcceptedNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedGroupId")
                        .HasColumnType("int");

                    b.Property<int>("RequestingStudentId")
                        .HasColumnType("int");

                    b.Property<bool>("Resolved")
                        .HasColumnType("bit");

                    b.Property<string>("VotedStudents")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestedGroupId");

                    b.HasIndex("RequestingStudentId");

                    b.ToTable("JoinRequests");
                });

            modelBuilder.Entity("backend.Models.MergeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("Resolved")
                        .HasColumnType("bit");

                    b.Property<int>("SenderGroupId")
                        .HasColumnType("int");

                    b.Property<string>("VotedStudents")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverGroupId");

                    b.HasIndex("SenderGroupId");

                    b.ToTable("MergeRequests");
                });

            modelBuilder.Entity("backend.Models.PeerGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffiliatedSectionID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxGrade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProjectGroupId")
                        .HasColumnType("int");

                    b.Property<int>("RevieweeId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AffiliatedSectionID");

                    b.HasIndex("ProjectGroupId");

                    b.ToTable("PeerGrades");
                });

            modelBuilder.Entity("backend.Models.PeerGradeAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignmentDescriptionFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("PeerGradeAssignments");
                });

            modelBuilder.Entity("backend.Models.ProjectGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GradedProjectGroupID")
                        .HasColumnType("int");

                    b.Property<int>("GradingUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxGrade")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GradedProjectGroupID");

                    b.HasIndex("GradingUserId");

                    b.ToTable("ProjectGrades");
                });

            modelBuilder.Entity("backend.Models.ProjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffiliatedCourseId")
                        .HasColumnType("int");

                    b.Property<int>("AffiliatedSectionId")
                        .HasColumnType("int");

                    b.Property<bool>("ConfirmationState")
                        .HasColumnType("bit");

                    b.Property<string>("ConfirmedGroupMembers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConfirmedUserNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProjectInformation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AffiliatedCourseId");

                    b.HasIndex("AffiliatedSectionId");

                    b.ToTable("ProjectGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffiliatedCourseId = 1,
                            AffiliatedSectionId = 1,
                            ConfirmationState = false,
                            ConfirmedGroupMembers = "",
                            ConfirmedUserNumber = 0,
                            ProjectInformation = "BilHub Class Helper"
                        },
                        new
                        {
                            Id = 5,
                            AffiliatedCourseId = 1,
                            AffiliatedSectionId = 1,
                            ConfirmationState = false,
                            ConfirmedGroupMembers = "",
                            ConfirmedUserNumber = 0,
                            ProjectInformation = "Abduls Class Helper"
                        },
                        new
                        {
                            Id = 2,
                            AffiliatedCourseId = 1,
                            AffiliatedSectionId = 2,
                            ConfirmationState = false,
                            ConfirmedGroupMembers = "",
                            ConfirmedUserNumber = 0,
                            ProjectInformation = "Classrom Helper"
                        },
                        new
                        {
                            Id = 3,
                            AffiliatedCourseId = 2,
                            AffiliatedSectionId = 1,
                            ConfirmationState = false,
                            ConfirmedGroupMembers = "",
                            ConfirmedUserNumber = 0,
                            ProjectInformation = "AGA Language"
                        },
                        new
                        {
                            Id = 4,
                            AffiliatedCourseId = 2,
                            AffiliatedSectionId = 2,
                            ConfirmationState = false,
                            ConfirmedGroupMembers = "",
                            ConfirmedUserNumber = 0,
                            ProjectInformation = "Satis Language"
                        });
                });

            modelBuilder.Entity("backend.Models.ProjectGroupUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectGroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectGroupId");

                    b.HasIndex("ProjectGroupId");

                    b.ToTable("ProjectGroupUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ProjectGroupId = 1
                        },
                        new
                        {
                            UserId = 3,
                            ProjectGroupId = 1
                        },
                        new
                        {
                            UserId = 4,
                            ProjectGroupId = 1
                        },
                        new
                        {
                            UserId = 5,
                            ProjectGroupId = 1
                        },
                        new
                        {
                            UserId = 6,
                            ProjectGroupId = 1
                        },
                        new
                        {
                            UserId = 7,
                            ProjectGroupId = 1
                        },
                        new
                        {
                            UserId = 11,
                            ProjectGroupId = 2
                        },
                        new
                        {
                            UserId = 12,
                            ProjectGroupId = 2
                        },
                        new
                        {
                            UserId = 13,
                            ProjectGroupId = 2
                        },
                        new
                        {
                            UserId = 24,
                            ProjectGroupId = 2
                        },
                        new
                        {
                            UserId = 25,
                            ProjectGroupId = 5
                        },
                        new
                        {
                            UserId = 1,
                            ProjectGroupId = 3
                        },
                        new
                        {
                            UserId = 3,
                            ProjectGroupId = 3
                        },
                        new
                        {
                            UserId = 4,
                            ProjectGroupId = 3
                        },
                        new
                        {
                            UserId = 5,
                            ProjectGroupId = 4
                        },
                        new
                        {
                            UserId = 6,
                            ProjectGroupId = 4
                        },
                        new
                        {
                            UserId = 7,
                            ProjectGroupId = 4
                        });
                });

            modelBuilder.Entity("backend.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffiliatedCourseId")
                        .HasColumnType("int");

                    b.Property<int>("SectionNo")
                        .HasColumnType("int");

                    b.Property<bool>("SectionlessState")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AffiliatedCourseId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffiliatedCourseId = 1,
                            SectionNo = 1,
                            SectionlessState = false
                        },
                        new
                        {
                            Id = 2,
                            AffiliatedCourseId = 1,
                            SectionNo = 2,
                            SectionlessState = false
                        },
                        new
                        {
                            Id = 3,
                            AffiliatedCourseId = 2,
                            SectionNo = 1,
                            SectionlessState = true
                        },
                        new
                        {
                            Id = 4,
                            AffiliatedCourseId = 2,
                            SectionNo = 2,
                            SectionlessState = true
                        },
                        new
                        {
                            Id = 5,
                            AffiliatedCourseId = 3,
                            SectionNo = 1,
                            SectionlessState = false
                        },
                        new
                        {
                            Id = 6,
                            AffiliatedCourseId = 4,
                            SectionNo = 1,
                            SectionlessState = false
                        },
                        new
                        {
                            Id = 7,
                            AffiliatedCourseId = 4,
                            SectionNo = 2,
                            SectionlessState = false
                        },
                        new
                        {
                            Id = 8,
                            AffiliatedCourseId = 5,
                            SectionNo = 2,
                            SectionlessState = false
                        },
                        new
                        {
                            Id = 9,
                            AffiliatedCourseId = 6,
                            SectionNo = 1,
                            SectionlessState = false
                        });
                });

            modelBuilder.Entity("backend.Models.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffiliatedAssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("AffiliatedGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasSubmission")
                        .HasColumnType("bit");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AffiliatedAssignmentId");

                    b.HasIndex("AffiliatedGroupId");

                    b.ToTable("Submissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffiliatedAssignmentId = 1,
                            AffiliatedGroupId = 1,
                            CourseId = 1,
                            HasSubmission = false,
                            SectionId = 1,
                            UpdatedAt = new DateTime(2021, 4, 27, 0, 13, 21, 986, DateTimeKind.Local).AddTicks(6202)
                        });
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DarkModeStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SecondPasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VerifiedStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DarkModeStatus = false,
                            Email = "cagri@durgut",
                            Name = "Cagri Durgut",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 2,
                            DarkModeStatus = false,
                            Email = "eray@tuzun",
                            Name = "Eray Tuzun",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 3,
                            DarkModeStatus = false,
                            Email = "baris@ogun",
                            Name = "Baris Ogun",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 4,
                            DarkModeStatus = false,
                            Email = "ozgur@demir",
                            Name = "Ozgur Chadoglu",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 5,
                            DarkModeStatus = false,
                            Email = "yusuf@kawai",
                            Name = "Yusuf Uyar",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 6,
                            DarkModeStatus = false,
                            Email = "aybala@karakaya",
                            Name = "Aybala karakaya",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 7,
                            DarkModeStatus = false,
                            Email = "oguzhan@ozcelik",
                            Name = "oguzhan ozcelik",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 8,
                            DarkModeStatus = false,
                            Email = "berke@ceran",
                            Name = "HOCAM SIMDI BIZ SOYLE BI SISTEM DUSUNDUK DE",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 9,
                            DarkModeStatus = false,
                            Email = "funda@tan",
                            Name = "Funda Tan",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 10,
                            DarkModeStatus = false,
                            Email = "hami@mert",
                            Name = "Hami Mert",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 11,
                            DarkModeStatus = false,
                            Email = "cagri@eren",
                            Name = "Cagri Eren",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 12,
                            DarkModeStatus = false,
                            Email = "guven@gerger",
                            Name = "Guven Gerger",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 13,
                            DarkModeStatus = false,
                            Email = "onur@korkmaz",
                            Name = "Onur Korkmaz",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 14,
                            DarkModeStatus = false,
                            Email = "fuat@schwarzenegger",
                            Name = "Fuat Schwarzengger",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 15,
                            DarkModeStatus = false,
                            Email = "aynur@dayanik",
                            Name = "Aynur Dayanik",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 1,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 16,
                            DarkModeStatus = false,
                            Email = "erdem@Tuna",
                            Name = "Erdem Tuna",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 17,
                            DarkModeStatus = false,
                            Email = "elgun@ta",
                            Name = "Elgun TA",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 18,
                            DarkModeStatus = false,
                            Email = "irem@reis",
                            Name = "Irem Reis",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 19,
                            DarkModeStatus = false,
                            Email = "fazli@can",
                            Name = "Fazli Can",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 1,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 20,
                            DarkModeStatus = false,
                            Email = "can@alkan",
                            Name = "Can Alkan",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 1,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 21,
                            DarkModeStatus = false,
                            Email = "ercument@cicek",
                            Name = "Ercument Cicek",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 1,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 22,
                            DarkModeStatus = false,
                            Email = "alper@karel",
                            Name = "Alper Sarikan",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 1,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 23,
                            DarkModeStatus = false,
                            Email = "altay@guvenir",
                            Name = "Altay Guvenir",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 1,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 24,
                            DarkModeStatus = false,
                            Email = "tuna@derbeder",
                            Name = "Tuna Derbeder",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        },
                        new
                        {
                            Id = 25,
                            DarkModeStatus = false,
                            Email = "abdul@razak",
                            Name = "Abdul Razak",
                            PasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            PasswordSalt = new byte[] { 141, 36, 139, 63, 183, 196, 8, 94, 65, 243, 19, 202, 47, 177, 149, 148, 42, 218, 218, 251, 215, 15, 218, 126, 110, 187, 60, 201, 143, 183, 114, 211, 33, 7, 233, 68, 134, 253, 200, 216, 152, 221, 34, 192, 98, 69, 131, 99, 94, 17, 35, 246, 63, 234, 221, 38, 50, 254, 67, 200, 165, 33, 119, 63, 181, 42, 68, 162, 61, 181, 99, 185, 91, 33, 49, 34, 40, 79, 168, 84, 33, 132, 202, 52, 77, 87, 205, 154, 72, 221, 160, 231, 128, 135, 49, 170, 9, 185, 252, 185, 61, 166, 98, 121, 73, 226, 41, 195, 43, 49, 95, 0, 22, 72, 207, 2, 25, 56, 74, 98, 182, 251, 191, 7, 193, 174, 6, 190 },
                            SecondPasswordHash = new byte[] { 196, 131, 214, 94, 23, 205, 221, 108, 192, 96, 207, 123, 246, 57, 103, 78, 177, 128, 245, 55, 170, 6, 85, 86, 177, 113, 143, 217, 49, 235, 144, 41, 14, 233, 65, 105, 27, 112, 144, 156, 109, 1, 104, 66, 92, 225, 189, 23, 219, 89, 118, 237, 161, 167, 97, 30, 199, 43, 241, 46, 132, 97, 77, 12 },
                            UserType = 0,
                            VerificationCode = "31",
                            VerifiedStatus = true
                        });
                });

            modelBuilder.Entity("backend.Models.Assignment", b =>
                {
                    b.HasOne("backend.Models.Section", "AffiliatedSection")
                        .WithMany()
                        .HasForeignKey("AffiliatedSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffiliatedSection");
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.HasOne("backend.Models.Submission", "CommentedSubmission")
                        .WithMany("Comments")
                        .HasForeignKey("CommentedSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "CommentedUser")
                        .WithMany("OutgoingComments")
                        .HasForeignKey("CommentedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentedSubmission");

                    b.Navigation("CommentedUser");
                });

            modelBuilder.Entity("backend.Models.CourseUser", b =>
                {
                    b.HasOne("backend.Models.Course", "Course")
                        .WithMany("Instructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("InstructedCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.JoinRequest", b =>
                {
                    b.HasOne("backend.Models.ProjectGroup", "RequestedGroup")
                        .WithMany("IncomingJoinRequests")
                        .HasForeignKey("RequestedGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "RequestingStudent")
                        .WithMany("OutgoingJoinRequests")
                        .HasForeignKey("RequestingStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestedGroup");

                    b.Navigation("RequestingStudent");
                });

            modelBuilder.Entity("backend.Models.MergeRequest", b =>
                {
                    b.HasOne("backend.Models.ProjectGroup", "ReceiverGroup")
                        .WithMany("IncomingMergeRequest")
                        .HasForeignKey("ReceiverGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.ProjectGroup", "SenderGroup")
                        .WithMany("OutgoingMergeRequest")
                        .HasForeignKey("SenderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverGroup");

                    b.Navigation("SenderGroup");
                });

            modelBuilder.Entity("backend.Models.PeerGrade", b =>
                {
                    b.HasOne("backend.Models.Section", "AffiliatedSection")
                        .WithMany()
                        .HasForeignKey("AffiliatedSectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.ProjectGroup", null)
                        .WithMany("PeerGrades")
                        .HasForeignKey("ProjectGroupId");

                    b.Navigation("AffiliatedSection");
                });

            modelBuilder.Entity("backend.Models.PeerGradeAssignment", b =>
                {
                    b.HasOne("backend.Models.Course", "AffiliatedCourse")
                        .WithOne("PeerGradeAssignment")
                        .HasForeignKey("backend.Models.PeerGradeAssignment", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffiliatedCourse");
                });

            modelBuilder.Entity("backend.Models.ProjectGrade", b =>
                {
                    b.HasOne("backend.Models.ProjectGroup", "GradedProjectGroup")
                        .WithMany("ProjectGrades")
                        .HasForeignKey("GradedProjectGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "GradingUser")
                        .WithMany()
                        .HasForeignKey("GradingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradedProjectGroup");

                    b.Navigation("GradingUser");
                });

            modelBuilder.Entity("backend.Models.ProjectGroup", b =>
                {
                    b.HasOne("backend.Models.Course", "AffiliatedCourse")
                        .WithMany()
                        .HasForeignKey("AffiliatedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Section", "AffiliatedSection")
                        .WithMany("ProjectGroups")
                        .HasForeignKey("AffiliatedSectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AffiliatedCourse");

                    b.Navigation("AffiliatedSection");
                });

            modelBuilder.Entity("backend.Models.ProjectGroupUser", b =>
                {
                    b.HasOne("backend.Models.ProjectGroup", "ProjectGroup")
                        .WithMany("GroupMembers")
                        .HasForeignKey("ProjectGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("ProjectGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Section", b =>
                {
                    b.HasOne("backend.Models.Course", "AffiliatedCourse")
                        .WithMany("Sections")
                        .HasForeignKey("AffiliatedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffiliatedCourse");
                });

            modelBuilder.Entity("backend.Models.Submission", b =>
                {
                    b.HasOne("backend.Models.Assignment", "AffiliatedAssignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AffiliatedAssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.ProjectGroup", "AffiliatedGroup")
                        .WithMany("Submissions")
                        .HasForeignKey("AffiliatedGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AffiliatedAssignment");

                    b.Navigation("AffiliatedGroup");
                });

            modelBuilder.Entity("backend.Models.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("backend.Models.Course", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("PeerGradeAssignment");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("backend.Models.ProjectGroup", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("IncomingJoinRequests");

                    b.Navigation("IncomingMergeRequest");

                    b.Navigation("OutgoingMergeRequest");

                    b.Navigation("PeerGrades");

                    b.Navigation("ProjectGrades");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("backend.Models.Section", b =>
                {
                    b.Navigation("ProjectGroups");
                });

            modelBuilder.Entity("backend.Models.Submission", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("InstructedCourses");

                    b.Navigation("OutgoingComments");

                    b.Navigation("OutgoingJoinRequests");

                    b.Navigation("ProjectGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
