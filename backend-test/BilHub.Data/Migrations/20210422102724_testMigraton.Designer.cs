// <auto-generated />
using System;
using BilHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BilHub.Data.Migrations
{
    [DbContext(typeof(BilHubDbContext))]
    [Migration("20210422102724_testMigraton")]
    partial class testMigraton
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BilHub.Core.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcceptedTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("AssignmentDescription")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("CanBeGradedByStudents")
                        .HasColumnType("bit");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxFileSizeInBytes")
                        .HasColumnType("int");

                    b.Property<int?>("PublishedUsedId")
                        .HasColumnType("int");

                    b.Property<bool>("VisibilityOfSubmission")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PublishedUsedId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("BilHub.Core.Models.AssistantCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("AssistantCourse");
                });

            modelBuilder.Entity("BilHub.Core.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommentedSubmissionId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentedUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("FileAttachmentAvailability")
                        .HasColumnType("bit");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<bool>("GradeStatus")
                        .HasColumnType("bit");

                    b.Property<double>("MaxGrade")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CommentedSubmissionId");

                    b.HasIndex("CommentedUserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("BilHub.Core.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseInformation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseSemester")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LockDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PeerGradeAssignmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeerGradeAssignmentId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("BilHub.Core.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DarkModeStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VerifiedStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("BilHub.Core.Models.InstructorCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorCourse");
                });

            modelBuilder.Entity("BilHub.Core.Models.JoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcceptedNumber")
                        .HasColumnType("int");

                    b.Property<int>("RejectedNumber")
                        .HasColumnType("int");

                    b.Property<int?>("RequestedGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestingStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestedGroupId");

                    b.HasIndex("RequestingStudentId");

                    b.HasIndex("SectionId");

                    b.ToTable("JoinRequest");
                });

            modelBuilder.Entity("BilHub.Core.Models.MergeRequest", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AcceptedNumberInReceiver")
                        .HasColumnType("int");

                    b.Property<int>("AcceptedNumberInSender")
                        .HasColumnType("int");

                    b.Property<int>("RejectedNumberInReceiver")
                        .HasColumnType("int");

                    b.Property<int>("RejectedNumberInSender")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("SenderGroupId");

                    b.ToTable("MergeRequest");
                });

            modelBuilder.Entity("BilHub.Core.Models.PeerGradeAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AssignmentDescription")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PublishedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublishedUserId");

                    b.ToTable("PeerGradeAssignment");
                });

            modelBuilder.Entity("BilHub.Core.Models.ProjectGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<int?>("GradedProjectGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("GradingStudentId")
                        .HasColumnType("int");

                    b.Property<double>("MaxGrade")
                        .HasColumnType("float");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradedProjectGroupId");

                    b.HasIndex("GradingStudentId");

                    b.ToTable("ProjectGrade");
                });

            modelBuilder.Entity("BilHub.Core.Models.ProjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AffiliatedCourseId")
                        .HasColumnType("int");

                    b.Property<bool>("ConfirmationState")
                        .HasColumnType("bit");

                    b.Property<int>("ConfirmedUserNumber")
                        .HasColumnType("int");

                    b.Property<int>("GroupSize")
                        .HasColumnType("int");

                    b.Property<string>("ProjectInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AffiliatedCourseId");

                    b.HasIndex("SectionId");

                    b.ToTable("ProjectGroup");
                });

            modelBuilder.Entity("BilHub.Core.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("SectionNo")
                        .HasColumnType("int");

                    b.Property<bool>("SectionlessState")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("BilHub.Core.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DarkModeStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("VerifiedStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("BilHub.Core.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("BilHub.Core.Models.StudentJoinRequest", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("JoinRequestId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "JoinRequestId");

                    b.HasIndex("JoinRequestId");

                    b.ToTable("StudentJoinRequest");
                });

            modelBuilder.Entity("BilHub.Core.Models.StudentMergeRequest", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("MergeRequestId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "MergeRequestId");

                    b.HasIndex("MergeRequestId");

                    b.ToTable("StudentMergeRequest");
                });

            modelBuilder.Entity("BilHub.Core.Models.StudentProjectGroup", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectGroupId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectGroupId");

                    b.HasIndex("ProjectGroupId");

                    b.ToTable("StudentProjectGroup");
                });

            modelBuilder.Entity("BilHub.Core.Models.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AffiliatedAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("AffiliatedGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AffiliatedAssignmentId");

                    b.HasIndex("AffiliatedGroupId");

                    b.HasIndex("CourseId");

                    b.ToTable("Submission");
                });

            modelBuilder.Entity("BilHub.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DarkModeStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifiedStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BilHub.Core.Models.Assignment", b =>
                {
                    b.HasOne("BilHub.Core.Models.Course", null)
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId");

                    b.HasOne("BilHub.Core.Models.User", "PublishedUsed")
                        .WithMany()
                        .HasForeignKey("PublishedUsedId");

                    b.Navigation("PublishedUsed");
                });

            modelBuilder.Entity("BilHub.Core.Models.AssistantCourse", b =>
                {
                    b.HasOne("BilHub.Core.Models.Course", "Course")
                        .WithMany("Assistants")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilHub.Core.Models.Student", "Student")
                        .WithMany("AssistedCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BilHub.Core.Models.Comment", b =>
                {
                    b.HasOne("BilHub.Core.Models.Submission", "CommentedSubmission")
                        .WithMany("MyProperty")
                        .HasForeignKey("CommentedSubmissionId");

                    b.HasOne("BilHub.Core.Models.User", "CommentedUser")
                        .WithMany()
                        .HasForeignKey("CommentedUserId");

                    b.Navigation("CommentedSubmission");

                    b.Navigation("CommentedUser");
                });

            modelBuilder.Entity("BilHub.Core.Models.Course", b =>
                {
                    b.HasOne("BilHub.Core.Models.PeerGradeAssignment", "PeerGradeAssignment")
                        .WithMany()
                        .HasForeignKey("PeerGradeAssignmentId");

                    b.Navigation("PeerGradeAssignment");
                });

            modelBuilder.Entity("BilHub.Core.Models.InstructorCourse", b =>
                {
                    b.HasOne("BilHub.Core.Models.Course", "Course")
                        .WithMany("Instructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilHub.Core.Models.Instructor", "Instructor")
                        .WithMany("InstructedCourses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("BilHub.Core.Models.JoinRequest", b =>
                {
                    b.HasOne("BilHub.Core.Models.ProjectGroup", "RequestedGroup")
                        .WithMany()
                        .HasForeignKey("RequestedGroupId");

                    b.HasOne("BilHub.Core.Models.Student", "RequestingStudent")
                        .WithMany()
                        .HasForeignKey("RequestingStudentId");

                    b.HasOne("BilHub.Core.Models.Section", null)
                        .WithMany("JoinRequests")
                        .HasForeignKey("SectionId");

                    b.Navigation("RequestedGroup");

                    b.Navigation("RequestingStudent");
                });

            modelBuilder.Entity("BilHub.Core.Models.MergeRequest", b =>
                {
                    b.HasOne("BilHub.Core.Models.ProjectGroup", "ReceiverGroup")
                        .WithMany("IncomingMergeRequest")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilHub.Core.Models.Section", null)
                        .WithMany("MergeRequests")
                        .HasForeignKey("SectionId");

                    b.HasOne("BilHub.Core.Models.ProjectGroup", "SenderGroup")
                        .WithMany("OutgoingMergeRequest")
                        .HasForeignKey("SenderGroupId");

                    b.Navigation("ReceiverGroup");

                    b.Navigation("SenderGroup");
                });

            modelBuilder.Entity("BilHub.Core.Models.PeerGradeAssignment", b =>
                {
                    b.HasOne("BilHub.Core.Models.User", "PublishedUser")
                        .WithMany()
                        .HasForeignKey("PublishedUserId");

                    b.Navigation("PublishedUser");
                });

            modelBuilder.Entity("BilHub.Core.Models.ProjectGrade", b =>
                {
                    b.HasOne("BilHub.Core.Models.Course", null)
                        .WithMany("ProjectGrades")
                        .HasForeignKey("CourseId");

                    b.HasOne("BilHub.Core.Models.ProjectGroup", "GradedProjectGroup")
                        .WithMany("ProjectGradings")
                        .HasForeignKey("GradedProjectGroupId");

                    b.HasOne("BilHub.Core.Models.Student", "GradingStudent")
                        .WithMany()
                        .HasForeignKey("GradingStudentId");

                    b.Navigation("GradedProjectGroup");

                    b.Navigation("GradingStudent");
                });

            modelBuilder.Entity("BilHub.Core.Models.ProjectGroup", b =>
                {
                    b.HasOne("BilHub.Core.Models.Course", "AffiliatedCourse")
                        .WithMany()
                        .HasForeignKey("AffiliatedCourseId");

                    b.HasOne("BilHub.Core.Models.Section", null)
                        .WithMany("ProjectGroups")
                        .HasForeignKey("SectionId");

                    b.Navigation("AffiliatedCourse");
                });

            modelBuilder.Entity("BilHub.Core.Models.Section", b =>
                {
                    b.HasOne("BilHub.Core.Models.Course", null)
                        .WithMany("Sections")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("BilHub.Core.Models.Student", b =>
                {
                    b.HasOne("BilHub.Core.Models.Section", null)
                        .WithMany("Students")
                        .HasForeignKey("SectionId");
                });

            modelBuilder.Entity("BilHub.Core.Models.StudentCourse", b =>
                {
                    b.HasOne("BilHub.Core.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilHub.Core.Models.Student", "Student")
                        .WithMany("TakenCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BilHub.Core.Models.StudentJoinRequest", b =>
                {
                    b.HasOne("BilHub.Core.Models.JoinRequest", "JoinRequest")
                        .WithMany("VotedStudents")
                        .HasForeignKey("JoinRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilHub.Core.Models.Student", "Student")
                        .WithMany("OutgoingJoinRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JoinRequest");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BilHub.Core.Models.StudentMergeRequest", b =>
                {
                    b.HasOne("BilHub.Core.Models.MergeRequest", "MergeRequest")
                        .WithMany("VotedStudents")
                        .HasForeignKey("MergeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilHub.Core.Models.Student", "Student")
                        .WithMany("UnvotedMergeRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MergeRequest");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BilHub.Core.Models.StudentProjectGroup", b =>
                {
                    b.HasOne("BilHub.Core.Models.ProjectGroup", "ProjectGroup")
                        .WithMany("GroupMembers")
                        .HasForeignKey("ProjectGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilHub.Core.Models.Student", "Student")
                        .WithMany("ProjectGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BilHub.Core.Models.Submission", b =>
                {
                    b.HasOne("BilHub.Core.Models.Assignment", "AffiliatedAssignment")
                        .WithMany()
                        .HasForeignKey("AffiliatedAssignmentId");

                    b.HasOne("BilHub.Core.Models.ProjectGroup", "AffiliatedGroup")
                        .WithMany("Submissions")
                        .HasForeignKey("AffiliatedGroupId");

                    b.HasOne("BilHub.Core.Models.Course", null)
                        .WithMany("Submissions")
                        .HasForeignKey("CourseId");

                    b.Navigation("AffiliatedAssignment");

                    b.Navigation("AffiliatedGroup");
                });

            modelBuilder.Entity("BilHub.Core.Models.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Assistants");

                    b.Navigation("Instructors");

                    b.Navigation("ProjectGrades");

                    b.Navigation("Sections");

                    b.Navigation("Students");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("BilHub.Core.Models.Instructor", b =>
                {
                    b.Navigation("InstructedCourses");
                });

            modelBuilder.Entity("BilHub.Core.Models.JoinRequest", b =>
                {
                    b.Navigation("VotedStudents");
                });

            modelBuilder.Entity("BilHub.Core.Models.MergeRequest", b =>
                {
                    b.Navigation("VotedStudents");
                });

            modelBuilder.Entity("BilHub.Core.Models.ProjectGroup", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("IncomingMergeRequest");

                    b.Navigation("OutgoingMergeRequest");

                    b.Navigation("ProjectGradings");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("BilHub.Core.Models.Section", b =>
                {
                    b.Navigation("JoinRequests");

                    b.Navigation("MergeRequests");

                    b.Navigation("ProjectGroups");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("BilHub.Core.Models.Student", b =>
                {
                    b.Navigation("AssistedCourses");

                    b.Navigation("OutgoingJoinRequests");

                    b.Navigation("ProjectGroups");

                    b.Navigation("TakenCourses");

                    b.Navigation("UnvotedMergeRequests");
                });

            modelBuilder.Entity("BilHub.Core.Models.Submission", b =>
                {
                    b.Navigation("MyProperty");
                });
#pragma warning restore 612, 618
        }
    }
}
